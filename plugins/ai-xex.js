import fetch from 'node-fetch';

const handler = async (m, { conn, args, usedPrefix, command }) => {
  const text = args.join(' ');

  if (!text) {
    return m.reply(`✧･ﾟ: *✧･ﾟ:* 🦈 *¡Hyaaa~! Escribe algo para que pueda ayudarte buba~!*\n\n*Ejemplo:* ${usedPrefix}${command} ¿Cómo hacer sushi?`);
  }

  try {
    await m.react('🤖');
    
    const name = m.pushName || 'Usuario';
    let result = '';

    // Intentar con diferentes APIs gratuitas
    try {
      result = await chatWithBlackbox(text, name);
    } catch (e) {
      console.error('Error Blackbox:', e);
      try {
        result = await chatWithOpenAI(text);
      } catch (e) {
        console.error('Error OpenAI fallback:', e);
        try {
          result = await chatWithSimpleAPI(text);
        } catch (e) {
          console.error('Error Simple API:', e);
          throw new Error('No se pudo obtener respuesta de ningún servicio');
        }
      }
    }

    const responseMsg = `
✧･ﾟ: *✧･ﾟ:* 🦈 *ɢᴀᴡʀ ɢᴜʀᴀ ᴀɪ* 🦈 :･ﾟ✧*:･ﾟ✧

${result}

꒰ 💙 *Pregunta de:* @${m.sender.split('@')[0]} ꒱
`;

    await conn.sendMessage(m.chat, {
      text: responseMsg,
      mentions: [m.sender]
    }, { quoted: m });

    await m.react('🦈');

  } catch (error) {
    console.error(error);
    await m.reply(`❌ *¡Hyaaa~! Algo salió mal buba~*\n\n*Error:* ${error.message}`);
    await m.react('❌');
  }
};

async function chatWithBlackbox(text, user) {
  const response = await fetch('https://www.blackbox.ai/api/chat', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    },
    body: JSON.stringify({
      messages: [{
        id: Date.now(),
        content: text,
        role: 'user'
      }],
      id: Date.now(),
      previewToken: null,
      userId: user,
      codeModelMode: true,
      agentMode: {},
      trendingAgentMode: {},
      isMicMode: false,
      maxTokens: 1024,
      isChromeExt: false,
      githubToken: null
    })
  });

  if (!response.ok) throw new Error('Blackbox API failed');
  
  const data = await response.text();
  return cleanResponse(data);
}

async function chatWithOpenAI(text) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [{
        role: 'user',
        content: text
      }],
      max_tokens: 1000,
      temperature: 0.7
    })
  });

  if (!response.ok) throw new Error('OpenAI API failed');
  
  const data = await response.json();
  return data.choices[0].message.content;
}

async function chatWithSimpleAPI(text) {
  const response = await fetch(`https://api.openai-sb.com/v1/chat/completions`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [{
        role: 'user',
        content: text
      }]
    })
  });

  if (!response.ok) throw new Error('Simple API failed');
  
  const data = await response.json();
  return data.choices[0].message.content;
}

function cleanResponse(text) {
  if (!text) return 'No se pudo obtener respuesta';
  return text
    .replace(/(\$@\$v=undefined-rv1\$@\$|\$@\$v=v1\.15-rv2\$@\$)/g, '')
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/gi, '')
    .replace(/and for API requests replace.*?https:\/\/api\.blackbox\.ai/gi, '')
    .replace(/\n{3,}/g, '\n\n')
    .trim();
}

handler.help = ['ask', 'ia', 'chat'];
handler.command = ['ask', 'ia', 'chat', 'gpt'];
handler.tags = ['ai'];
handler.register = false;

export default handler;